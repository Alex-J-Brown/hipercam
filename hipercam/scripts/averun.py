import sys
import os

import numpy as np

import hipercam as hcam
from hipercam import cline, utils
from hipercam.cline import Cline

__all__ = ['averun',]

#################################
#
# averun -- median average images
#
#################################

def averun(args=None):
    """``averun [source] (run first last twait tmax | flist) bias
    [method sigma adjust clobber] output``

    Averages images from a run using median combination, skipping the junk
    frames that result from NSKIP / NBLUE options in HiPERCAM and ULTRACAM
    data. `averun` is meant to be a simple tool to create median frames
    suitable prior to aperture selection with `setaper`. See `combine` if you
    want more fine-grained control over frame averaging. (`averun` uses a
    combination of `grab` [if needed] and `combine`).

    Parameters:

        source  : string [hidden]
           Data source, five options:

              | 'hs' : HiPERCAM server
              | 'hl' : local HiPERCAM FITS file
              | 'us' : ULTRACAM server
              | 'ul' : local ULTRACAM .xml/.dat files
              | 'hf' : list of HiPERCAM hcm FITS-format files

           'hf' is used to look at sets of frames generated by 'grab' or
           converted from foreign data formats.

        run     : string [if source ends 's' or 'l']
           run number to access, e.g. 'run034'

        flist   : string [if source ends 'f']
           name of file list

        first   : int [if source ends 's' or 'l']
           exposure number to start from. 1 = first frame ('0' is
           not supported).

        last    : int [if source ends 's' or 'l']
           last exposure number must be >= first.

        twait   : float [if source ends 's' or 'l'; hidden]
           time to wait between attempts to find a new exposure, seconds.

        tmax    : float [if source ends 's' or 'l'; hidden]
           maximum time to wait between attempts to find a new exposure,
           seconds.

        bias    : string
           Name of bias frame to subtract, 'none' to ignore.

        method  : string [hidden, defaults to 'm']
           'm' for median, 'c' for clipped mean. See below for pros and cons.

        sigma   : float [hidden; if method == 'c']
           With clipped mean combination, pixels that deviate by more than
           sigma RMS from the mean are kicked out. This is carried out in an
           iterative manner. sigma <= 0 implies no rejection, just a straight
           average. sigma=3 is typical.

        adjust  : string [hidden; defaults to 'i']
           adjustments to make: 'i' = ignore; 'n' = normalise the mean of all
           frames to match the first; 'b' = add offsets so that the mean of
           all frames is the same as the first.  Option 'n' is useful for
           twilight flats; 'b' for combining biases.

        clobber : bool [hidden]
           clobber any pre-existing output files

        output  : string
           output file

    """

    command, args = utils.script_args(args)

    # get the inputs
    with Cline('HIPERCAM_ENV', '.hipercam', command, args) as cl:

        # register parameters
        cl.register('source', Cline.GLOBAL, Cline.HIDE)
        cl.register('run', Cline.GLOBAL, Cline.PROMPT)
        cl.register('first', Cline.LOCAL, Cline.PROMPT)
        cl.register('last', Cline.LOCAL, Cline.PROMPT)
        cl.register('twait', Cline.LOCAL, Cline.HIDE)
        cl.register('tmax', Cline.LOCAL, Cline.HIDE)
        cl.register('flist', Cline.LOCAL, Cline.PROMPT)
        cl.register('bias', Cline.LOCAL, Cline.PROMPT)
        cl.register('method', Cline.LOCAL, Cline.HIDE)
        cl.register('sigma', Cline.LOCAL, Cline.HIDE)
        cl.register('adjust', Cline.LOCAL, Cline.HIDE)
        cl.register('clobber', Cline.LOCAL, Cline.HIDE)
        cl.register('output', Cline.LOCAL, Cline.PROMPT)

        # get inputs
        source = cl.get_value(
            'source', 'data source [hs, hl, us, ul, hf]',
            'hl', lvals=('hs','hl','us','ul','hf')
        )

        # set a flag
        server_or_local = source.endswith('s') or source.endswith('l')

        if server_or_local:
            run = cl.get_value('run', 'run name', 'run005')
            first = cl.get_value('first', 'first frame to average', 1, 1)
            last = cl.get_value('last', 'last frame to average', first, first)
            twait = cl.get_value(
                'twait', 'time to wait for a new frame [secs]', 1., 0.)
            tmax = cl.get_value(
                'tmax', 'maximum time to wait for a new frame [secs]', 10., 0.)

        else:
            flist = cl.get_value('flist', 'file list',
                               cline.Fname('files.lis',hcam.LIST))
            first = 1

        # bias frame (if any)
        bias = cl.get_value(
            'bias', "bias frame ['none' to ignore]",
            cline.Fname('bias', hcam.HCAM), ignore='none'
        )

        cl.set_default('method','m')
        method = cl.get_value(
            'method', 'c(lipped mean), m(edian)', 'c', lvals=('c','m')
        )

        if method == 'c':
            sigma = cl.get_value('sigma', 'number of RMS deviations to clip', 3.)

        cl.set_default('adjust','i')
        adjust = cl.get_value(
            'adjust', 'i(gnore), n(ormalise) b(ias offsets)',
            'i', lvals=('i','n','b')
        )

        clobber = cl.get_value(
            'clobber', 'clobber any pre-existing files on output',
            False
        )

        output = cl.get_value(
            'output', 'output average',
            cline.Fname(
                'hcam', hcam.HCAM,
                cline.Fname.NEW if clobber else cline.Fname.NOCLOBBER
            )
        )

    # inputs done with. Now do the work with 'grab' and 'combine'

    if server_or_local:
        print("\nCalling 'grab' ...")
        args = [
            None,'prompt',source,run,'yes',
            str(first),str(last),str(twait),
            str(tmax),'none','f32'
        ]
        flist = hcam.scripts.grab(args)

    try:
        print("\nCalling 'combine' ...")
        if method == 'm':
            args = [
                None, 'prompt', flist,
                'none' if bias is None else bias, method, adjust,
                'usemean=yes', 'plot=no',
                'yes' if clobber else 'no', output
            ]
        else:
            args = [
                None, 'prompt', flist,
                'none' if bias is None else bias, method, str(sigma),
                adjust, 'usemean=yes', 'plot=no',
                'yes' if clobber else 'no', output
            ]
        hcam.scripts.combine(args)

        # remove temporary files
        with open(flist) as fin:
            for fname in fin:
                fname = fname.strip()
                os.remove(fname)
        os.remove(flist)
        print('\ntemporary files have been deleted')
        print('averun finished')

    except KeyboardInterrupt:
        # this to ensure we delete the temporary files
        with open(flist) as fin:
            for fname in fin:
                fname = fname.strip()
                os.remove(fname)
        os.remove(flist)
        print('\ntemporary files have been deleted')
        print('averun aborted')


